/* 
 * Copyright 2023 Totem Technology, UAB
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#include "totem_test.h"
#include "bsp/roboboard_x4.h"
#include "bsp/roboboard_x4.hpp"

TEST_CASE("Validate initial state [rgb][C]", "[rgb][C]") {
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_D));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_B));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_C));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_D));
}

TEST_CASE("Test write over limits", "[rgb][C]") {
    // BSP_RGB_COLOR
    TEST_EQUAL(ESP_OK, bsp_cmd_write(BSP_RGB_COLOR, BSP_PORT_ALL, 0xFFFFFFFF)); TEST_EQUAL(0xFFFFFFFF, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(ESP_OK, bsp_cmd_write(BSP_RGB_COLOR, BSP_PORT_ALL, 0)); TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(ESP_OK, bsp_cmd_write(BSP_RGB_FADE_COLOR, BSP_PORT_ALL, 0x07F9A5D1)); TEST_EQUAL(0x07F9A5D1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(ESP_OK, bsp_cmd_write(BSP_RGB_FADE_START, BSP_PORT_ALL, 10)); TEST_EQUAL(10, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_A));
    TEST_EQUAL(ESP_OK, bsp_cmd_write(BSP_RGB_CONFIG_ENABLE, BSP_PORT_ALL, 20)); TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
}

TEST_CASE("Test write over limits", "[rgb][C++]") {
    uint32_t colorA;
    uint32_t colorB;
    uint32_t colorC;
    uint32_t colorD;
    // X4.rgb
    X4.rgb.disable();
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_D));
    X4.rgb.enable();
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_B));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_C));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_D));
    X4.rgb.colorARGB(0x55, 0x12, 0x23, 0x34);
    TEST_EQUAL(0x55122334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0x55122334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0x55122334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0x55122334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.colorRGB(0x34, 0x44, 0x56);
    TEST_EQUAL(0xFF344456, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xFF344456, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xFF344456, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xFF344456, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.colorAHEX(0xF1, 0xAAC1D1E1);
    TEST_EQUAL(0xF1C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xF1C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xF1C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xF1C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.colorHEX(0xD5C1D1E1);
    TEST_EQUAL(0xD5C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xD5C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xD5C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xD5C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    colorA = 0xD5C1D1E0;
    colorB = 0xD5C1D1E1;
    colorC = 0xD5C1D1E2;
    colorD = 0xD5C1D1E3;
    X4.rgbA.colorHEX(colorA);
    X4.rgbB.colorHEX(colorB);
    X4.rgbC.colorHEX(colorC);
    X4.rgbD.colorHEX(colorD);
    X4.rgb.off();
    TEST_EQUAL(0, X4.rgb.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.on();
    TEST_EQUAL(1, X4.rgb.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(colorC, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.set(0);
    TEST_EQUAL(0, X4.rgb.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.set(5);
    TEST_EQUAL(1, X4.rgb.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(colorC, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.toggle();
    TEST_EQUAL(0, X4.rgb.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.toggle();
    TEST_EQUAL(1, X4.rgb.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(colorC, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.fadeColorARGB(0x56, 0x12, 0x23, 0x34);
    TEST_EQUAL(0x56122334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0x56122334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0x56122334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0x56122334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgb.fadeColorRGB(0x33, 0x44, 0x56);
    TEST_EQUAL(0xFF334456, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xFF334456, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xFF334456, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xFF334456, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgb.fadeColorAHEX(0xF0, 0xAAC0D1E1);
    TEST_EQUAL(0xF0C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xF0C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xF0C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xF0C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgb.fadeColorHEX(0xD7C1D1E1);
    TEST_EQUAL(0xD7C1D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xD7C1D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xD7C1D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xD7C1D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgb.fadeStart(5);
    TEST_EQUAL(5, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_A));
    TEST_EQUAL(5, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_B));
    TEST_EQUAL(5, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_C));
    TEST_EQUAL(5, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_D));
    // X4.rgbX
    X4.rgbA.disable();
    X4.rgbC.disable();
    X4.rgbC.colorHEX(0x12341231);
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_C));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_D));
    TEST_EQUAL(0x12341231, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    X4.rgbA.enable();
    X4.rgbC.enable();
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_A));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_B));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_C));
    TEST_EQUAL(1, bsp_cmd_read(BSP_RGB_CONFIG_ENABLE, BSP_PORT_D));
    TEST_EQUAL(0x12341231, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    X4.rgbA.colorARGB(0x55, 0x13, 0x23, 0x34);
    X4.rgbB.colorARGB(0x55, 0x14, 0x23, 0x34);
    X4.rgbC.colorARGB(0x55, 0x15, 0x23, 0x34);
    X4.rgbD.colorARGB(0x55, 0x16, 0x23, 0x34);
    TEST_EQUAL(0x55132334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0x55142334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0x55152334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0x55162334, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.colorRGB(0x34, 0x44, 0x56);
    X4.rgbB.colorRGB(0x34, 0x45, 0x56);
    X4.rgbC.colorRGB(0x34, 0x46, 0x56);
    X4.rgbD.colorRGB(0x34, 0x47, 0x56);
    TEST_EQUAL(0xFF344456, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xFF344556, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xFF344656, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xFF344756, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.colorAHEX(0xF1, 0xAAC1D1E1);
    X4.rgbB.colorAHEX(0xF1, 0xAAC2D1E1);
    X4.rgbC.colorAHEX(0xF1, 0xAAC3D1E1);
    X4.rgbD.colorAHEX(0xF1, 0xAAC4D1E1);
    TEST_EQUAL(0xF1C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xF1C2D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xF1C3D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xF1C4D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.colorHEX(0xD5C1D1E1);
    X4.rgbB.colorHEX(0xD5C1D1E2);
    X4.rgbC.colorHEX(0xD5C1D1E3);
    X4.rgbD.colorHEX(0xD5C1D1E4);
    TEST_EQUAL(0xD5C1D1E1, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xD5C1D1E2, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xD5C1D1E3, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xD5C1D1E4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    colorA = 0xD5C1D1E0;
    colorB = 0xD5C1D1E1;
    colorC = 0xD5C1D1E2;
    colorD = 0xD5C1D1E3;
    X4.rgbA.colorHEX(colorA);
    X4.rgbB.colorHEX(colorB);
    X4.rgbC.colorHEX(colorC);
    X4.rgbD.colorHEX(colorD);
    X4.rgbA.off();
    X4.rgbB.off();
    X4.rgbC.off();
    TEST_EQUAL(0, X4.rgbA.isOn());
    TEST_EQUAL(0, X4.rgbB.isOn());
    TEST_EQUAL(0, X4.rgbC.isOn());
    TEST_EQUAL(1, X4.rgbD.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.on();
    X4.rgbB.on();
    X4.rgbC.on();
    X4.rgbD.on();
    TEST_EQUAL(1, X4.rgbA.isOn());
    TEST_EQUAL(1, X4.rgbB.isOn());
    TEST_EQUAL(1, X4.rgbC.isOn());
    TEST_EQUAL(1, X4.rgbD.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(colorC, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.set(0);
    X4.rgbB.set(0);
    X4.rgbC.set(0);
    X4.rgbD.set(0);
    TEST_EQUAL(0, X4.rgbA.isOn());
    TEST_EQUAL(0, X4.rgbB.isOn());
    TEST_EQUAL(0, X4.rgbC.isOn());
    TEST_EQUAL(0, X4.rgbD.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.set(5);
    X4.rgbB.set(5);
    X4.rgbC.set(0);
    X4.rgbD.set(5);
    TEST_EQUAL(1, X4.rgbA.isOn());
    TEST_EQUAL(1, X4.rgbB.isOn());
    TEST_EQUAL(0, X4.rgbC.isOn());
    TEST_EQUAL(1, X4.rgbD.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.toggle();
    TEST_EQUAL(0, X4.rgbA.isOn());
    TEST_EQUAL(0, X4.rgbB.isOn());
    TEST_EQUAL(1, X4.rgbC.isOn());
    TEST_EQUAL(0, X4.rgbD.isOn());
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(colorC, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.toggle();
    TEST_EQUAL(1, X4.rgbA.isOn());
    TEST_EQUAL(1, X4.rgbB.isOn());
    TEST_EQUAL(0, X4.rgbC.isOn());
    TEST_EQUAL(1, X4.rgbD.isOn());
    TEST_EQUAL(colorA, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(colorB, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(colorD, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgbA.fadeColorARGB(0x56, 0x12, 0x23, 0x34);
    X4.rgbB.fadeColorARGB(0x56, 0x13, 0x23, 0x34);
    X4.rgbC.fadeColorARGB(0x56, 0x14, 0x23, 0x34);
    X4.rgbD.fadeColorARGB(0x56, 0x15, 0x23, 0x34);
    TEST_EQUAL(0x56122334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0x56132334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0x56142334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0x56152334, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgbA.fadeColorRGB(0x33, 0x44, 0x56);
    X4.rgbB.fadeColorRGB(0x33, 0x44, 0x57);
    X4.rgbC.fadeColorRGB(0x33, 0x44, 0x58);
    X4.rgbD.fadeColorRGB(0x33, 0x44, 0x59);
    TEST_EQUAL(0xFF334456, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xFF334457, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xFF334458, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xFF334459, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgbA.fadeColorAHEX(0xF0, 0xAAC0D1E1);
    X4.rgbB.fadeColorAHEX(0xF1, 0xAAC0D1E1);
    X4.rgbC.fadeColorAHEX(0xF2, 0xAAC0D1E1);
    X4.rgbD.fadeColorAHEX(0xF3, 0xAAC0D1E1);
    TEST_EQUAL(0xF0C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xF1C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xF2C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xF3C0D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgbA.fadeColorHEX(0xD7C1D1E1);
    X4.rgbB.fadeColorHEX(0xD7C1D2E1);
    X4.rgbC.fadeColorHEX(0xD7C1D3E1);
    X4.rgbD.fadeColorHEX(0xD7C1D4E1);
    TEST_EQUAL(0xD7C1D1E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xD7C1D2E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xD7C1D3E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xD7C1D4E1, bsp_cmd_read(BSP_RGB_FADE_COLOR, BSP_PORT_D));
    X4.rgbA.fadeStart(5);
    X4.rgbB.fadeStart(6);
    X4.rgbC.fadeStart(8);
    X4.rgbD.fadeStart(9);
    TEST_EQUAL(5, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_A));
    TEST_EQUAL(6, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_B));
    TEST_EQUAL(8, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_C));
    TEST_EQUAL(9, bsp_cmd_read(BSP_RGB_FADE_START, BSP_PORT_D));
}

TEST_CASE("Acces C++ port index", "[rgb][C++]") {
    // X4.rgb[]
    X4.rgb[0].colorHEX(0xA1A2A3A4);
    X4.rgb[1].colorHEX(0xB1B2B3B4);
    X4.rgb[2].colorHEX(0xC1C2C3C4);
    X4.rgb[3].colorHEX(0xD1D2D3D4);
    TEST_EQUAL(0xA1A2A3A4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xB1B2B3B4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xC1C2C3C4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xD1D2D3D4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb[4].colorHEX(0xE1E2E3E4);
    TEST_EQUAL(0xA1A2A3A4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_A));
    TEST_EQUAL(0xB1B2B3B4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_B));
    TEST_EQUAL(0xC1C2C3C4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_C));
    TEST_EQUAL(0xE1E2E3E4, bsp_cmd_read(BSP_RGB_COLOR, BSP_PORT_D));
    X4.rgb.off();
}
